    // ~ 操作符非, 加一取负, 如~7 = -8
    // ^ 按位异, 不同为1, 如1 ^ 1 = 0,
    // | 按位或, 有1为1, 如 i = 1, 二进制为0001, i | 2, 2的二进制为0010, 0001 | 0010 = 0011 = 3
    // & 按位与, 都1为1, 如 i = 5, 二进制为0101, i | 2, 5的二进制为0010, 0101 & 0010 = 0000 = 0
    // 左移位运算 <<, 0000101 = 5, 0000101 << 2 = 00010100 = 20, 超过32位则舍弃.
    // 右移位运算 >>, 32位数字中所有有效数字整体右移,再使用符号位的值填充空位,超出值会被舍弃.-1000 >> 8, 0000 0011 1110 1000 = -1000 => 0000 0000 0000 0011 = 3.
    // 无符号右移位运算符 >>>, 把无符号的32位整数所有位数整体右移, 对于无符号数或正数右移运算, 无符号右移与有符号右移运算的结果是相同的.
    // 比如 1000 >> 8 结果为3, 1000 >>> 8 结果也为3.
    // 对于负数来说, 无符号右移将使用0来填充所有的空位, 同时也会把负数作为正数来处理, 所得到的结果会很大, 所以使用无符号右移运算符时要也别小心,避免出现问题.
    //  -1000 >> 8 结果为-4, -1000 >>> 8 结果为16777212
    // -1000 = 1111 1111 1111 1111 1111 1100 0001 1000 >>> 8 结果为 0000 0000 1111 1111 1111 1111 1111 1100
